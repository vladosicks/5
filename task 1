#include <winsock2.h>
#include <ws2tcpip.h>
#include <windows.h>
#include <iostream>
#include <string>
#include <thread>
#include <mutex>
#include <vector>
#include "json/json.h" // Include jsoncpp header

#pragma comment(lib, "Ws2_32.lib")

std::mutex clientMutex;

void handleClient(SOCKET clientSocket) {
    char buffer[1024];
    int bytesReceived;

    while ((bytesReceived = recv(clientSocket, buffer, sizeof(buffer), 0)) > 0) {
        buffer[bytesReceived] = '\0';
        std::cout << "Received: " << buffer << std::endl;

        // Send response
        std::string response = "Server received: " + std::string(buffer);
        send(clientSocket, response.c_str(), response.size(), 0);
    }

    std::cout << "Client disconnected." << std::endl;
    closesocket(clientSocket);
}

void startTCPServer(const std::string& port) {
    WSADATA wsaData;
    WSAStartup(MAKEWORD(2, 2), &wsaData);

    SOCKET serverSocket = socket(AF_INET, SOCK_STREAM, 0);

    sockaddr_in serverAddr = {};
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY;
    serverAddr.sin_port = htons(std::stoi(port));

    bind(serverSocket, (sockaddr*)&serverAddr, sizeof(serverAddr));
    listen(serverSocket, SOMAXCONN);

    std::cout << "TCP Server listening on port " << port << std::endl;

    std::vector<std::thread> threads;

    while (true) {
        SOCKET clientSocket = accept(serverSocket, NULL, NULL);
        std::cout << "New client connected." << std::endl;

        std::lock_guard<std::mutex> lock(clientMutex);
        threads.emplace_back(std::thread(handleClient, clientSocket));
    }

    for (auto& thread : threads) {
        if (thread.joinable()) thread.join();
    }

    closesocket(serverSocket);
    WSACleanup();
}

void startTCPClient(const std::string& serverIP, const std::string& port) {
    WSADATA wsaData;
    WSAStartup(MAKEWORD(2, 2), &wsaData);

    SOCKET clientSocket = socket(AF_INET, SOCK_STREAM, 0);

    sockaddr_in serverAddr = {};
    serverAddr.sin_family = AF_INET;
    inet_pton(AF_INET, serverIP.c_str(), &serverAddr.sin_addr);
    serverAddr.sin_port = htons(std::stoi(port));

    connect(clientSocket, (sockaddr*)&serverAddr, sizeof(serverAddr));
    std::cout << "Connected to server." << std::endl;

    std::string message;
    char buffer[1024];

    while (true) {
        std::getline(std::cin, message);
        send(clientSocket, message.c_str(), message.size(), 0);

        int bytesReceived = recv(clientSocket, buffer, sizeof(buffer), 0);
        buffer[bytesReceived] = '\0';
        std::cout << "Server: " << buffer << std::endl;
    }

    closesocket(clientSocket);
    WSACleanup();
}

void startUDPServer(const std::string& port) {
    WSADATA wsaData;
    WSAStartup(MAKEWORD(2, 2), &wsaData);

    SOCKET serverSocket = socket(AF_INET, SOCK_DGRAM, 0);

    sockaddr_in serverAddr = {};
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_addr.s_addr = INADDR_ANY;
    serverAddr.sin_port = htons(std::stoi(port));

    bind(serverSocket, (sockaddr*)&serverAddr, sizeof(serverAddr));

    std::cout << "UDP Server listening on port " << port << std::endl;

    char buffer[1024];
    sockaddr_in clientAddr;
    int clientAddrSize = sizeof(clientAddr);

    while (true) {
        int bytesReceived = recvfrom(serverSocket, buffer, sizeof(buffer), 0, (sockaddr*)&clientAddr, &clientAddrSize);
        buffer[bytesReceived] = '\0';
        std::cout << "Received: " << buffer << std::endl;

        sendto(serverSocket, buffer, bytesReceived, 0, (sockaddr*)&clientAddr, clientAddrSize);
    }

    closesocket(serverSocket);
    WSACleanup();
}

void startUDPClient(const std::string& serverIP, const std::string& port) {
    WSADATA wsaData;
    WSAStartup(MAKEWORD(2, 2), &wsaData);

    SOCKET clientSocket = socket(AF_INET, SOCK_DGRAM, 0);

    sockaddr_in serverAddr = {};
    serverAddr.sin_family = AF_INET;
    inet_pton(AF_INET, serverIP.c_str(), &serverAddr.sin_addr);
    serverAddr.sin_port = htons(std::stoi(port));

    std::string message;
    char buffer[1024];

    while (true) {
        std::getline(std::cin, message);
        sendto(clientSocket, message.c_str(), message.size(), 0, (sockaddr*)&serverAddr, sizeof(serverAddr));

        int bytesReceived = recvfrom(clientSocket, buffer, sizeof(buffer), 0, NULL, NULL);
        buffer[bytesReceived] = '\0';
        std::cout << "Server: " << buffer << std::endl;
    }

    closesocket(clientSocket);
    WSACleanup();
}

void serializeAndSend(SOCKET clientSocket, const Json::Value& data) {
    Json::StreamWriterBuilder writer;
    std::string serializedData = Json::writeString(writer, data);
    send(clientSocket, serializedData.c_str(), serializedData.size(), 0);
}

Json::Value receiveAndDeserialize(SOCKET clientSocket) {
    char buffer[2048];
    int bytesReceived = recv(clientSocket, buffer, sizeof(buffer), 0);
    buffer[bytesReceived] = '\0';

    Json::CharReaderBuilder reader;
    Json::Value data;
    std::string errors;
    std::istringstream input(buffer);
    Json::parseFromStream(reader, input, &data, &errors);
    return data;
}

int main() {
    std::string mode, port, serverIP;

    std::cout << "Enter mode (tcp-server, tcp-client, udp-server, udp-client): ";
    std::cin >> mode;

    if (mode == "tcp-server") {
        std::cout << "Enter port: ";
        std::cin >> port;
        startTCPServer(port);
    } else if (mode == "tcp-client") {
        std::cout << "Enter server IP: ";
        std::cin >> serverIP;
        std::cout << "Enter port: ";
        std::cin >> port;
        startTCPClient(serverIP, port);
    } else if (mode == "udp-server") {
        std::cout << "Enter port: ";
        std::cin >> port;
        startUDPServer(port);
    } else if (mode == "udp-client") {
        std::cout << "Enter server IP: ";
        std::cin >> serverIP;
        std::cout << "Enter port: ";
        std::cin >> port;
        startUDPClient(serverIP, port);
    } else {
        std::cout << "Invalid mode." << std::endl;
    }

    return 0;
}
